/* BuildTargetInfo.h(.in) : Local platform specific definitions inserted at compile time; 
 * Author: Maxie D. Schmidt (maxieds@gmail.com)
 * Created: 2018.10.31
 */

#ifndef __BUILD_TARGET_INFO_H__
#define __BUILD_TARGET_INFO_H__

#ifdef TARGETOS_LINUX
     #define __TARGETOS_LINUX__
     #define TARGETOS "GNU/Linux"
#elif defined(TARGETOS_OPENBSD)
     #define __TARGETOS_OPENBSD__
     #define TARGETOS "OpenBSD"
#elif defined(TARGETOS_FREEBSD) 
     #define __TARGETOS_FREEBSD__
     #define TARGETOS "FreeBSD"
#elif defined(TARGETOS_GNUHURD) 
     #define __TARGETOS_GNUHURD__
     #define TARGETOS "GNU/Hurd"
#elif defined(TARGETOS_MACOSX)
     #define __TARGETOS_APPLE__
     #define TARGETOS "MacOSX/Darwin"
#else 
     #define TARGETOS_GENERIC_UNIX
     #define __TARGETOS_UNIX__
     #define TARGETOS "Generic Unix (Unknown Build Target)"
#endif

#ifdef TARGETOS_MACOSX
     #ifndef __APPLE__
          #define __APPLE__
     #endif
     #include <string.h>
     /* Mac OSX apparently does not support the strchrnul function: */
     static inline char* strchrnul(const char *s, int ch) {
          if(s == NULL) {
               return NULL;
       }
          char *strchrResult = (char *) strchr(s, ch);
          if(strchrResult == NULL) {
            size_t slen = strnlen(s, 2048);
               return (char *) (s + slen);
       }
          return strchrResult;
     }        
#endif

#ifdef __LOCAL_NOUSE_THREADS
     #undef _GLIBCXX__PTHREADS
     #undef _GLIBCXX_HAS_GTHREADS
     #ifdef __STDC_NO_THREADS__
          #undef __STDC_NO_THREADS__
     #endif
     #define __STDC_NO_THREADS__ (1)
#endif

#ifndef _GNU_SOURCE
     #define _GNU_SOURCE
#endif

#if __GNUC__ > 5
     #define GNU_CONST_STATIC_DECLARATION constexpr
#else
     #define GNU_CONST_STATIC_DECLARATION const
#endif

// Debugging settings with the -fsanitize=address flag:
#ifndef __RNASTRUCTVIZ_LOCAL_FSANITIZE_CONFIG
     #define __RNASTRUCTVIZ_LOCAL_FSANITIZE_CONFIG          (1)
     static inline const char* __asan_default_options() { 
          return "verbosity=1:malloc_context_size=20:detect_leaks=0:"
		 "detect_stack_use_after_return=1:print_stats=1:log_threads=1"; 
     }
#endif

#define FLTK_USE_CAIRO  1
#define FLTK_HAVE_CAIRO 1

#define ERRORS_TO_ISO8859_1   1      /* FLTK Unicode character encoding */

#ifndef BOOST_FILESYSTEM_NO_DEPRECATED
#define BOOST_FILESYSTEM_NO_DEPRECATED
#endif

#define __STRUCTVIZ_INSTALL_SIGNAL_HANDLERS
#define __STRUCTVIZ_INSTALL_SIGSEGV_HANDLER     1
#define __STRUCTVIZ_INSTALL_CTRLC_HANDLER       1

#define RNASTRUCTVIZ_VSTRING         ("ðŸ§¬  RNAStructViz v2.3.1-testing -- RNA Secondary Structure Comparison Multi-Tool")

#define HUGE_BUFFER_LINE_SIZE        (2048)

#include <stdlib.h>
#include <stdio.h>

#include <FL/Fl.H>
#include <FL/fl_ask.H>

#include <string>
using std::string;

class ApplicationBuildInfo {

     protected:
          inline static const char *GIT_RELEASE_TYPE      = "BETA-TESTING"; //"##__GIT_RELEASE_TYPE__##";
	  inline static const char *GIT_COMMIT_HASH       = "##__GIT_COMMITREV_HASHNUM__##";
          inline static const char *GIT_COMMIT_HASH_SHORT = "##__GIT_COMMITREV_HASHNUM_SHORT__##";
          inline static const char *GIT_COMMIT_DATE       = "##__GIT_COMMITREV_DATE__##";
          inline static const char *GIT_BRANCH_REVSTRING  = "##__GIT_DESCRIBE_REVSTRING__##";
          inline static const char *BUILD_PLATFORM_ID     = "##__BUILD_PLATFORM_ID__##";
          inline static const char *BUILD_DATETIME        = "##__LOCAL_BUILD_TIME__##";
          inline static const char *BUILD_FLTK_CONFIG     = "##__BUILD_FLTK_CONFIG__##";

     public:
       static inline string RNAStructVizFigletTextLogo() {
            static const char *figletTextLogoLines[] = {
                 "+-+-+-+-+-+-+-+-+-+-+-+-+",
                 "|R|N|A|S|t|r|u|c|t|V|i|z|",
                 "+-+-+-+-+-+-+-+-+-+-+-+-+",
	    };
            std::string figletTextLogo = std::string("");
            int numLogoLines = sizeof(figletTextLogoLines) / sizeof(figletTextLogoLines[0]);
            for(int line = 0; line < numLogoLines; line++) {
                 figletTextLogo += std::string(figletTextLogoLines[line]) + std::string("\n");
            }
            return figletTextLogo.substr(0, figletTextLogo.length() - 1);
       }
          
       static inline string UserManualWikiLink() {
               return string("User Manual: https://github.com/gtDMMB/RNAStructViz/wiki");
       }

       static inline string GitReleaseType() {
            string releaseDesc = string("Git Release Type: ") + string(GIT_RELEASE_TYPE);
	    return releaseDesc;
       }

       static inline string GitRevisionInfoFull() {
               char revString[HUGE_BUFFER_LINE_SIZE];
               snprintf(revString, HUGE_BUFFER_LINE_SIZE, 
                     "Git Revision: %s (%s) [%s]", 
                     GIT_COMMIT_HASH_SHORT, GIT_COMMIT_HASH, GIT_BRANCH_REVSTRING);
               revString[HUGE_BUFFER_LINE_SIZE - 1] = '\0';
               return string(revString);
       }

       static inline string GitRevisionInfo() {
               char revString[HUGE_BUFFER_LINE_SIZE];
               snprintf(revString, HUGE_BUFFER_LINE_SIZE, 
                     "Git Revision: %s [%s]", 
                     GIT_COMMIT_HASH_SHORT, GIT_BRANCH_REVSTRING);
               revString[HUGE_BUFFER_LINE_SIZE - 1] = '\0';
               return string(revString);
       }

       static inline string GitRevisionDate() {
               return string("Revision Date: ") + string(GIT_COMMIT_DATE);
       }

       static inline string BuildPlatform() {
            return string("Target Platform: ") + string(BUILD_PLATFORM_ID);
       }

       static inline string LocalBuildDateTime() {
            return string("Local Build Time: ") + string(BUILD_DATETIME);
       }

       static inline string BuildFLTKConfig() {
               return string("FLTK-Config: ") + 
                string(BUILD_FLTK_CONFIG);
       }

       static inline string CairoVersionString() {
               return string("Cairo Library: ") + string(CAIRO_VERSION_STRING);
       }

       static inline string FLTKVersionString() {
            char fltkVersionStr[HUGE_BUFFER_LINE_SIZE];
            snprintf(fltkVersionStr, HUGE_BUFFER_LINE_SIZE - 1, 
                     "%d.%d.%d (API #%d)", 
                     FL_MAJOR_VERSION, FL_MINOR_VERSION, FL_PATCH_VERSION, FL_API_VERSION);
            fltkVersionStr[HUGE_BUFFER_LINE_SIZE - 1] = '\0';
            return string("FLTK Library: ") + string(fltkVersionStr);
       }

       static inline void PrintAboutListing(const char *aboutStr = NULL, FILE *whichOut = stderr) {
            if(whichOut == NULL) {
                    whichOut = stderr;
            }
            fprintf(whichOut, "%s\n\n", RNAStructVizFigletTextLogo().c_str());
            fprintf(whichOut, "==== %s ====\n\n", RNASTRUCTVIZ_VSTRING);
            fprintf(whichOut, "ABOUT THIS APPLICATION:\n");
            if(aboutStr == NULL) {
                    fprintf(whichOut, "   >>%s\n   >> %s\n   >> %s\n   >> %s\n   >> %s\n   >> %s\n   >> %s\n   >> %s\n   >> %s\n\n", 
                                      UserManualWikiLink().c_str(), 
				      GitReleaseType().c_str(), GitRevisionInfoFull().c_str(), 
                                      GitRevisionDate().c_str(), FLTKVersionString().c_str(),
                                      BuildFLTKConfig().c_str(),  
                                      CairoVersionString().c_str(), BuildPlatform().c_str(), 
                                      LocalBuildDateTime().c_str());
            }
            else {
                 fprintf(whichOut, "%s\n\n", aboutStr);
            }
	    for(unsigned int chi = 0; chi < strlen(RNASTRUCTVIZ_VSTRING); chi++) {
	         fprintf(whichOut, "=");
	    }
	    fprintf(whichOut, "\n\n");
            const char *bugReportMsg = "Please include a screenshot along with this information in any bug report you submit.\n"
                                       "   New issues with the application can be submitted by following the instructions at\n" 
                                       "   Â« https://github.com/gtDMMB/RNAStructViz/wiki/BugReportingAndErrors Â»";
            fprintf(whichOut, "BUG REPORT INFORMATION:\n** %s **\n", bugReportMsg);
       }

};

#endif
