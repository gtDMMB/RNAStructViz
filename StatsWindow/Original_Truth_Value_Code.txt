void StructureManager::ClearTruthValues()
{
    for (int i = 0; i < m_structureCount; ++i)
    {
	RNAStructure* structure = m_structures[i];
	if (!structure)
	    continue;
	int length = structure->GetLength();
	for (int j = 0; j < length; ++j)
	{
	    structure->GetBaseAt(j)->m_truth = RNAStructure::TruePositive;
	}
    }
}

void StructureManager::UpdateTruthValues(const int index)
{
    if (index == -1)
    {
	ClearTruthValues();
	return;
    }

    RNAStructure* refStructure = m_structures[index];
    int length = refStructure->GetLength();
    for (int j = 0; j < length; ++j)
    {
	refStructure->GetBaseAt(j)->m_truth = RNAStructure::TruePositive;
    }

    for (int i = 0; i < m_structureCount; ++i)
    {
	RNAStructure* otherStructure = m_structures[i];
	if (!otherStructure || otherStructure == refStructure)
	    continue;
	for (int j = 0; j < length; ++j)
	{
	    RNAStructure::BaseData* refBase = refStructure->GetBaseAt(j);
	    RNAStructure::BaseData* otherBase = otherStructure->GetBaseAt(j);
	    if (refBase->m_pair == RNAStructure::UNPAIRED)
	    {
		if (otherBase->m_pair == RNAStructure::UNPAIRED)
		{
		    otherBase->m_truth = RNAStructure::TrueNegative;
		}
		else
		{
		    otherBase->m_truth = RNAStructure::FalsePositive;
		}
	    }
	    else
	    {
		if (otherBase->m_pair == RNAStructure::UNPAIRED)
		{
		    otherBase->m_truth = RNAStructure::FalseNegative;
		}
		else if (otherBase->m_pair == refBase->m_pair)
		{
		    otherBase->m_truth = RNAStructure::TruePositive;
		}
		else
		{
		    otherBase->m_truth = RNAStructure::FalsePositive;
		}
	    }
	}
    }
}
